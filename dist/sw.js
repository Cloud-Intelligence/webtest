const CACHE_NAME="ci-www-v1",STATIC_CACHE="ci-static-v1",DYNAMIC_CACHE="ci-dynamic-v1",STATIC_ASSETS=["/webtest/","/webtest/index.html","/webtest/logo.png","/webtest/ci-logo.png","/webtest/hero-gradient-2eb61d.png","/webtest/cloud1.svg","/webtest/cloud2.svg","/webtest/cloud3.svg"],CACHE_STRATEGIES={images:/\.(png|jpg|jpeg|webp|svg|gif)$/,fonts:/\.(woff|woff2|ttf|eot)$/,assets:/\.(css|js)$/,api:/\/api\//};async function handleRequest(e){const t=new URL(e.url),s=t.pathname;try{return CACHE_STRATEGIES.images.test(s)||(CACHE_STRATEGIES.fonts.test(s)||t.hostname.includes("fonts.gstatic.com"))?await cacheFirst(e,STATIC_CACHE):CACHE_STRATEGIES.assets.test(s)?await staleWhileRevalidate(e,DYNAMIC_CACHE):(e.headers.get("accept")?.includes("text/html"),await networkFirst(e,DYNAMIC_CACHE))}catch(t){if(console.error("[SW] Request failed:",t),e.headers.get("accept")?.includes("text/html")){const e=await caches.match("/webtest/");if(e)return e}throw t}}async function cacheFirst(e,t){const s=await caches.match(e);if(s)return s;const c=await fetch(e);if(c.ok){(await caches.open(t)).put(e,c.clone())}return c}async function networkFirst(e,t){try{const s=await fetch(e);if(s.ok){(await caches.open(t)).put(e,s.clone())}return s}catch(t){const s=await caches.match(e);if(s)return s;throw t}}async function staleWhileRevalidate(e,t){const s=await caches.match(e),c=fetch(e).then((s=>{if(s.ok){caches.open(t).then((t=>t.put(e,s.clone())))}return s}));return s||c}self.addEventListener("install",(e=>{console.log("[SW] Installing service worker..."),e.waitUntil(caches.open(STATIC_CACHE).then((e=>(console.log("[SW] Caching static assets"),e.addAll(STATIC_ASSETS)))).then((()=>(console.log("[SW] Static assets cached"),self.skipWaiting()))).catch((e=>{console.error("[SW] Failed to cache static assets:",e)})))})),self.addEventListener("activate",(e=>{console.log("[SW] Activating service worker..."),e.waitUntil(caches.keys().then((e=>Promise.all(e.map((e=>{if(e!==STATIC_CACHE&&e!==DYNAMIC_CACHE)return console.log("[SW] Deleting old cache:",e),caches.delete(e)}))))).then((()=>(console.log("[SW] Service worker activated"),self.clients.claim()))))})),self.addEventListener("fetch",(e=>{const{request:t}=e,s=new URL(t.url);"GET"===t.method&&(s.origin===self.location.origin||s.hostname.includes("fonts.gstatic.com")||s.hostname.includes("fonts.googleapis.com"))&&e.respondWith(handleRequest(t))})),self.addEventListener("sync",(e=>{console.log("[SW] Background sync:",e.tag)})),self.addEventListener("push",(e=>{console.log("[SW] Push notification received")}));