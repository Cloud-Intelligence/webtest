---
import { type CollectionEntry, getCollection } from 'astro:content';
import Layout from '../../layouts/Layout.astro';

export async function getStaticPaths() {
  const demos = await getCollection('liveDemos');
  return demos.map((demo) => ({
    params: { slug: demo.slug },
    props: demo,
  }));
}

type Props = CollectionEntry<'liveDemos'>;

const demo = Astro.props;
const { Content } = await demo.render();
---

<Layout title={`${demo.data.title} - Cloud Intelligence`} showNavbar={false}>
  <main class="min-h-screen bg-gradient-to-br from-slate-900 via-slate-800 to-slate-900">
    <article class="container mx-auto px-8 py-20 max-w-6xl">
      <header class="mb-16">
        <div class="mb-12">
          <a 
            href="/webtest/resources/live-demos"
            class="inline-flex items-center text-blue-400 hover:text-blue-300 font-medium transition-colors mb-8 text-lg"
          >
            <svg class="w-5 h-5 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
            </svg>
            Back to Live Demos
          </a>
        </div>
        
        <div class="grid lg:grid-cols-3 gap-12 mb-12">
          <div class="lg:col-span-2">
            <div class="flex items-center gap-6 text-sm text-gray-400 mb-6">
              <span class="px-4 py-2 bg-blue-900/30 text-blue-300 rounded border border-blue-700/30 font-semibold uppercase tracking-wider">
                {demo.data.category}
              </span>
              <span class="px-4 py-2 bg-yellow-900/30 text-yellow-300 rounded border border-yellow-700/30 font-semibold uppercase tracking-wider">
                {demo.data.complexity}
              </span>
              {demo.data.interactive && (
                <span class="px-4 py-2 bg-green-900/30 text-green-300 rounded border border-green-700/30 font-semibold uppercase tracking-wider">
                  Interactive
                </span>
              )}
            </div>
            
            <h1 class="text-5xl md:text-6xl font-bold text-white mb-8 leading-tight font-serif tracking-tight">
              {demo.data.title}
            </h1>
            
            <p class="text-xl text-gray-300 mb-10 leading-relaxed">
              {demo.data.description}
            </p>
          </div>
          
          <div class="bg-white/5 backdrop-blur-sm border border-white/10 rounded-lg p-8">
            <h3 class="font-bold text-white mb-6 text-lg uppercase tracking-wider">Demo Details</h3>
            <div class="space-y-6 text-sm">
              <div>
                <span class="font-semibold text-gray-300 uppercase tracking-wide">Duration:</span>
                <p class="text-white mt-1">{demo.data.duration}</p>
              </div>
              <div>
                <span class="font-semibold text-gray-300 uppercase tracking-wide">Category:</span>
                <p class="text-white mt-1">{demo.data.category}</p>
              </div>
              <div>
                <span class="font-semibold text-gray-300 uppercase tracking-wide">Complexity:</span>
                <p class="text-white mt-1">{demo.data.complexity}</p>
              </div>
              {demo.data.technologies && (
                <div>
                  <span class="font-semibold text-gray-300 uppercase tracking-wide">Technologies:</span>
                  <div class="flex flex-wrap gap-2 mt-2">
                    {demo.data.technologies.map((tech) => (
                      <span class="px-3 py-1 bg-gray-700/50 text-gray-200 text-xs rounded border border-gray-600/30 font-mono">
                        {tech}
                      </span>
                    ))}
                  </div>
                </div>
              )}
            </div>
          </div>
        </div>
        
        <!-- Demo Preview and Actions -->
        <div class="grid md:grid-cols-3 gap-8 mb-16">
          <div class="bg-gradient-to-br from-blue-900/20 to-purple-900/20 border border-blue-700/30 rounded-lg p-8 backdrop-blur-sm">
            <h3 class="font-bold text-blue-300 mb-4 flex items-center text-lg uppercase tracking-wider">
              <svg class="w-6 h-6 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z"></path>
              </svg>
              Watch Demo
            </h3>
            <button class="demo-video-button w-full py-3 px-6 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-all duration-300 font-semibold" data-video={demo.data.videoUrl}>
              Play Demo Video
            </button>
          </div>
          
          {demo.data.interactive && (
            <div class="bg-gradient-to-br from-green-900/20 to-emerald-900/20 border border-green-700/30 rounded-lg p-8 backdrop-blur-sm">
              <h3 class="font-bold text-green-300 mb-4 flex items-center text-lg uppercase tracking-wider">
                <svg class="w-6 h-6 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
                </svg>
                Try Interactive
              </h3>
              <a href={demo.data.demoUrl} class="block w-full py-3 px-6 bg-green-600 hover:bg-green-700 text-white rounded-lg transition-all duration-300 font-semibold text-center">
                Launch Demo
              </a>
            </div>
          )}
          
          <div class="bg-gradient-to-br from-purple-900/20 to-pink-900/20 border border-purple-700/30 rounded-lg p-8 backdrop-blur-sm">
            <h3 class="font-bold text-purple-300 mb-4 flex items-center text-lg uppercase tracking-wider">
              <svg class="w-6 h-6 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
              </svg>
              Key Features
            </h3>
            <ul class="text-purple-100 space-y-2">
              {demo.data.features.slice(0, 3).map((feature) => (
                <li class="flex items-start text-sm">
                  <svg class="w-4 h-4 mr-2 mt-0.5 flex-shrink-0 text-purple-400" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
                  </svg>
                  {feature}
                </li>
              ))}
              {demo.data.features.length > 3 && (
                <li class="text-purple-300 text-sm">+ {demo.data.features.length - 3} more features</li>
              )}
            </ul>
          </div>
        </div>
      </header>
      
      <div class="bg-white/5 backdrop-blur-sm border border-white/10 rounded-lg p-12 md:p-16">
        <div class="demo-content max-w-none">
          <Content />
        </div>
      </div>
      
      <footer class="mt-20 text-center">
        <div class="flex flex-col sm:flex-row gap-6 justify-center items-center">
          <a 
            href="/webtest/resources/live-demos"
            class="inline-flex items-center px-8 py-4 bg-blue-600 text-white font-semibold rounded-lg hover:bg-blue-700 transition-all duration-300 uppercase tracking-wider"
          >
            <svg class="w-5 h-5 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
            </svg>
            More Demos
          </a>
          
          <a 
            href="/webtest/contact"
            class="inline-flex items-center px-8 py-4 border-2 border-green-400 text-green-400 font-semibold rounded-lg hover:bg-green-400 hover:text-slate-900 transition-all duration-300 uppercase tracking-wider"
          >
            <svg class="w-5 h-5 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"></path>
            </svg>
            Get Custom Demo
          </a>
        </div>
      </footer>
    </article>
  </main>

  <!-- Video Modal -->
  <div class="video-modal" id="videoModal">
    <div class="modal-content">
      <button class="close-button">&times;</button>
      <video controls id="demoVideo">
        <source src="" type="video/mp4">
        Your browser does not support the video tag.
      </video>
    </div>
  </div>
</Layout>

<style is:global>
  @import url('https://fonts.googleapis.com/css2?family=Crimson+Text:ital,wght@0,400;0,600;1,400&family=Source+Serif+Pro:ital,wght@0,400;0,600;1,400&display=swap');
  
  .font-serif {
    font-family: 'Source Serif Pro', serif;
  }
  
  .demo-content {
    color: #e2e8f0;
    font-family: 'Source Serif Pro', serif;
    line-height: 1.8;
  }
  
  .demo-content :is(h1, h2, h3, h4, h5, h6) {
    color: #ffffff !important;
    font-weight: 700 !important;
    font-family: 'Crimson Text', serif !important;
    letter-spacing: -0.025em !important;
    margin-top: 3rem !important;
    margin-bottom: 1.5rem !important;
    display: block !important;
  }
  
  .demo-content h1 {
    font-size: 3rem !important;
    line-height: 1.1 !important;
    margin-top: 0 !important;
  }
  
  .demo-content h2 {
    font-size: 2.5rem !important;
    line-height: 1.15 !important;
    border-bottom: 2px solid rgba(59, 130, 246, 0.3) !important;
    padding-bottom: 0.75rem !important;
  }
  
  .demo-content h3 {
    font-size: 2.25rem !important;
    line-height: 1.2 !important;
    color: #93c5fd !important;
  }
  
  .demo-content h4 {
    font-size: 1.75rem !important;
    line-height: 1.3 !important;
    color: #cbd5e1 !important;
  }
  
  .demo-content p {
    margin-top: 1.25rem !important;
    margin-bottom: 1.5rem !important;
    font-size: 1rem !important;
    line-height: 1.75 !important;
    color: #e2e8f0 !important;
  }
  
  .demo-content a {
    color: #60a5fa;
    text-decoration: none;
    border-bottom: 1px solid rgba(96, 165, 250, 0.3);
    transition: all 0.3s ease;
  }
  
  .demo-content a:hover {
    color: #93c5fd;
    border-bottom-color: #93c5fd;
  }
  
  .demo-content ul {
    list-style: none !important;
    padding-left: 0 !important;
    margin: 2rem 0 !important;
  }
  
  .demo-content li {
    margin: 1rem 0 !important;
    padding-left: 2rem !important;
    position: relative !important;
    font-size: 1rem !important;
    line-height: 1.7 !important;
    color: #e2e8f0 !important;
  }
  
  .demo-content ul li::before {
    content: "▸" !important;
    position: absolute !important;
    left: 0 !important;
    color: #60a5fa !important;
    font-weight: bold !important;
    font-size: 1.25rem !important;
  }
  
  .demo-content strong {
    font-weight: 600 !important;
    color: #ffffff !important;
  }
  
  .demo-content em {
    font-style: italic !important;
    color: #cbd5e1 !important;
  }
  
  .demo-content code {
    background-color: rgba(30, 41, 59, 0.5) !important;
    color: #fbbf24 !important;
    padding: 0.25rem 0.5rem !important;
    border-radius: 0.375rem !important;
    font-size: 0.9em !important;
    font-family: 'Monaco', 'Menlo', monospace !important;
    border: 1px solid rgba(59, 130, 246, 0.2) !important;
  }
  
  .demo-content pre {
    background-color: rgba(15, 23, 42, 0.8) !important;
    border: 1px solid rgba(59, 130, 246, 0.2) !important;
    border-radius: 0.5rem !important;
    padding: 1.5rem !important;
    overflow-x: auto !important;
    margin: 2rem 0 !important;
  }
  
  .demo-content pre code {
    background: none !important;
    border: none !important;
    padding: 0 !important;
    color: #e2e8f0 !important;
  }
  
  .demo-content blockquote {
    border-left: 4px solid #60a5fa !important;
    margin: 2rem 0 !important;
    font-style: italic !important;
    color: #cbd5e1 !important;
    background-color: rgba(59, 130, 246, 0.05) !important;
    padding: 1.5rem !important;
    border-radius: 0 0.5rem 0.5rem 0 !important;
    font-size: 1.125rem !important;
    line-height: 1.6 !important;
  }

  .video-modal {
    display: none;
    position: fixed;
    z-index: 1000;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.9);
  }
  
  .modal-content {
    position: relative;
    margin: 5% auto;
    width: 80%;
    max-width: 800px;
  }
  
  .modal-content video {
    width: 100%;
    height: auto;
  }
  
  .close-button {
    position: absolute;
    top: -40px;
    right: 0;
    color: #FFFFFF;
    font-size: 2rem;
    font-weight: bold;
    background: none;
    border: none;
    cursor: pointer;
  }
  
  .close-button:hover {
    opacity: 0.7;
  }

  /* Responsive font sizes for mobile */
  @media (max-width: 768px) {
    .demo-content h1 {
      font-size: 2.5rem !important;
    }
    
    .demo-content h2 {
      font-size: 2rem !important;
    }
    
    .demo-content h3 {
      font-size: 1.5rem !important;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const videoButtons = document.querySelectorAll('.demo-video-button') as NodeListOf<HTMLButtonElement>;
    const videoModal = document.getElementById('videoModal') as HTMLElement | null;
    const demoVideo = document.getElementById('demoVideo') as HTMLVideoElement | null;
    const closeButton = document.querySelector('.close-button') as HTMLButtonElement | null;
    
    function openVideoModal(videoUrl: string) {
      if (demoVideo && videoModal) {
        demoVideo.src = videoUrl;
        videoModal.style.display = 'block';
        document.body.style.overflow = 'hidden';
      }
    }
    
    function closeVideoModal() {
      if (videoModal && demoVideo) {
        videoModal.style.display = 'none';
        demoVideo.pause();
        demoVideo.src = '';
        document.body.style.overflow = 'auto';
      }
    }
    
    videoButtons.forEach(button => {
      button.addEventListener('click', function(this: HTMLButtonElement) {
        const videoUrl = this.dataset.video;
        if (videoUrl) {
          openVideoModal(videoUrl);
        }
      });
    });
    
    closeButton?.addEventListener('click', closeVideoModal);
    
    videoModal?.addEventListener('click', function(e: Event) {
      if (e.target === videoModal) {
        closeVideoModal();
      }
    });
    
    document.addEventListener('keydown', function(e: KeyboardEvent) {
      if (e.key === 'Escape' && videoModal?.style.display === 'block') {
        closeVideoModal();
      }
    });
  });
</script>