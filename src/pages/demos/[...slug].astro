---
import { type CollectionEntry, getCollection } from 'astro:content';
import ContentLayout from '../../layouts/ContentLayout.astro';

export async function getStaticPaths() {
  const demos = await getCollection('liveDemos');
  return demos.map((demo) => ({
    params: { slug: demo.slug },
    props: demo,
  }));
}

type Props = CollectionEntry<'liveDemos'>;

const demo = Astro.props;
const { Content } = await demo.render();
---

<ContentLayout title={`${demo.data.title} - Cloud Intelligence`} contentType="demo">
  <main class="min-h-screen bg-white">
    <article class="max-w-4xl mx-auto px-6 py-12">
      <!-- Navigation -->
      <nav class="mb-12">
        <a 
          href="/webtest/resources/live-demos"
          class="inline-flex items-center text-gray-600 hover:text-gray-900 font-sans text-sm font-medium transition-colors"
        >
          <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
          </svg>
          Live Demos
        </a>
      </nav>

      <!-- Article Header -->
      <header class="mb-12 max-w-3xl">
        <h1 class="text-4xl md:text-5xl font-bold text-gray-900 mb-6 leading-tight font-sans tracking-tight">
          {demo.data.title}
        </h1>
        
        <p class="text-xl text-gray-600 leading-relaxed mb-8 font-sans">
          {demo.data.description}
        </p>
        
        <!-- Demo Meta Info -->
        <div class="py-6 border-y border-gray-200">
          <div class="grid md:grid-cols-2 gap-6">
            <div>
              <h3 class="text-sm font-semibold text-gray-900 uppercase tracking-wide mb-3 font-sans">Demo Details</h3>
              <div class="space-y-2">
                <div class="flex items-center text-sm">
                  <span class="text-gray-600 font-sans w-24">Duration:</span>
                  <span class="text-gray-900 font-medium font-sans">{demo.data.duration}</span>
                </div>
                <div class="flex items-center text-sm">
                  <span class="text-gray-600 font-sans w-24">Category:</span>
                  <span class="text-gray-900 font-medium font-sans">{demo.data.category}</span>
                </div>
                <div class="flex items-center text-sm">
                  <span class="text-gray-600 font-sans w-24">Complexity:</span>
                  <span class="text-gray-900 font-medium font-sans">{demo.data.complexity}</span>
                </div>
              </div>
            </div>
            
            <div>
              <h3 class="text-sm font-semibold text-gray-900 uppercase tracking-wide mb-3 font-sans">Technologies</h3>
              <div class="flex flex-wrap gap-2">
                {demo.data.technologies && demo.data.technologies.map((tech) => (
                  <span class="px-3 py-1 bg-gray-100 text-gray-700 text-xs rounded-full font-sans font-medium">
                    {tech}
                  </span>
                ))}
              </div>
            </div>
          </div>
        </div>
      </header>
      
      <!-- Demo Actions -->
      <div class="grid md:grid-cols-3 gap-6 mb-12">
        <div class="p-6 bg-gray-50 rounded-lg">
          <h3 class="font-semibold text-gray-900 mb-3 font-sans flex items-center">
            <svg class="w-5 h-5 mr-2 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z"></path>
            </svg>
            Watch Demo
          </h3>
          <button class="demo-video-button w-full py-3 px-4 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors font-sans font-medium" data-video={demo.data.videoUrl}>
            Play Video
          </button>
        </div>
        
        {demo.data.interactive && (
          <div class="p-6 bg-gray-50 rounded-lg">
            <h3 class="font-semibold text-gray-900 mb-3 font-sans flex items-center">
              <svg class="w-5 h-5 mr-2 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
              </svg>
              Try Interactive
            </h3>
            <a href={demo.data.demoUrl} class="block w-full py-3 px-4 bg-green-600 hover:bg-green-700 text-white rounded-lg transition-colors font-sans font-medium text-center">
              Launch Demo
            </a>
          </div>
        )}
        
        <div class="p-6 bg-gray-50 rounded-lg">
          <h3 class="font-semibold text-gray-900 mb-3 font-sans flex items-center">
            <svg class="w-5 h-5 mr-2 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
            </svg>
            Key Features
          </h3>
          <ul class="text-sm text-gray-600 space-y-1">
            {demo.data.features.slice(0, 3).map((feature) => (
              <li class="flex items-start font-sans">
                <span class="text-purple-600 mr-2">â€¢</span>
                {feature}
              </li>
            ))}
            {demo.data.features.length > 3 && (
              <li class="text-gray-500 text-xs font-sans">+ {demo.data.features.length - 3} more features</li>
            )}
          </ul>
        </div>
      </div>
      
      <!-- Article Content -->
      <div class="demo-content">
        <Content />
      </div>
      
      <!-- Article Footer -->
      <footer class="mt-16 pt-8 border-t border-gray-200">
        <div class="flex items-center justify-between">
          <div class="flex items-center gap-6">
            <button class="flex items-center gap-2 px-4 py-2 rounded-lg border border-gray-300 hover:bg-gray-50 transition-colors font-sans">
              <svg class="w-5 h-5 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"></path>
              </svg>
              <span class="text-sm font-medium text-gray-700">Share</span>
            </button>
          </div>
          
          <div class="flex items-center gap-3">
            <a 
              href="/webtest/resources/live-demos"
              class="px-6 py-2 text-sm font-medium text-gray-700 hover:text-gray-900 transition-colors font-sans"
            >
              More Demos
            </a>
            <a 
              href="/webtest/contact"
              class="px-6 py-2 bg-gray-900 text-white text-sm font-medium rounded-lg hover:bg-gray-800 transition-colors font-sans"
            >
              Get Custom Demo
            </a>
          </div>
        </div>
      </footer>
    </article>
  </main>

  <!-- Video Modal -->
  <div class="video-modal" id="videoModal">
    <div class="modal-content">
      <button class="close-button">&times;</button>
      <video controls id="demoVideo">
        <source src="" type="video/mp4">
        Your browser does not support the video tag.
      </video>
    </div>
  </div>
</ContentLayout>

<style>
  @import '@/styles/shared/content-pages.scss';

  .video-modal {
    display: none;
    position: fixed;
    z-index: 1000;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.9);
  }
  
  .modal-content {
    position: relative;
    margin: 5% auto;
    width: 80%;
    max-width: 800px;
  }
  
  .modal-content video {
    width: 100%;
    height: auto;
  }
  
  .close-button {
    position: absolute;
    top: -40px;
    right: 0;
    color: #FFFFFF;
    font-size: 2rem;
    font-weight: bold;
    background: none;
    border: none;
    cursor: pointer;
  }
  
  .close-button:hover {
    opacity: 0.7;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const videoButtons = document.querySelectorAll('.demo-video-button') as NodeListOf<HTMLButtonElement>;
    const videoModal = document.getElementById('videoModal') as HTMLElement | null;
    const demoVideo = document.getElementById('demoVideo') as HTMLVideoElement | null;
    const closeButton = document.querySelector('.close-button') as HTMLButtonElement | null;
    
    function openVideoModal(videoUrl: string) {
      if (demoVideo && videoModal) {
        demoVideo.src = videoUrl;
        videoModal.style.display = 'block';
        document.body.style.overflow = 'hidden';
      }
    }
    
    function closeVideoModal() {
      if (videoModal && demoVideo) {
        videoModal.style.display = 'none';
        demoVideo.pause();
        demoVideo.src = '';
        document.body.style.overflow = 'auto';
      }
    }
    
    videoButtons.forEach(button => {
      button.addEventListener('click', function(this: HTMLButtonElement) {
        const videoUrl = this.dataset.video;
        if (videoUrl) {
          openVideoModal(videoUrl);
        }
      });
    });
    
    closeButton?.addEventListener('click', closeVideoModal);
    
    videoModal?.addEventListener('click', function(e: Event) {
      if (e.target === videoModal) {
        closeVideoModal();
      }
    });
    
    document.addEventListener('keydown', function(e: KeyboardEvent) {
      if (e.key === 'Escape' && videoModal?.style.display === 'block') {
        closeVideoModal();
      }
    });
  });
</script>