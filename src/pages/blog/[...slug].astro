---
import { type CollectionEntry, getCollection } from 'astro:content';
import ContentLayout from '../../layouts/ContentLayout.astro';

export async function getStaticPaths() {
  const posts = await getCollection('blog');
  return posts.map((post) => ({
    params: { slug: post.slug },
    props: post,
  }));
}

type Props = CollectionEntry<'blog'>;

const post = Astro.props;
const { Content } = await post.render();
---

<ContentLayout title={`${post.data.title} - Cloud Intelligence`} contentType="blog">
  <main class="min-h-screen bg-white">
    <article class="max-w-4xl mx-auto px-6 py-12">
      <!-- Navigation -->
      <nav class="mb-12">
        <a 
          href="/webtest/resources/technical-blog"
          class="inline-flex items-center text-gray-600 hover:text-gray-900 font-sans text-sm font-medium transition-colors"
        >
          <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
          </svg>
          Technical Blog
        </a>
      </nav>

      <!-- Article Header -->
      <header class="mb-12 max-w-3xl">
        <h1 class="text-4xl md:text-5xl font-bold text-gray-900 mb-6 leading-tight font-sans tracking-tight">
          {post.data.title}
        </h1>
        
        <p class="text-xl text-gray-600 leading-relaxed mb-8 font-sans">
          {post.data.description}
        </p>
        
        <!-- Author and Meta Info -->
        <div class="flex items-center justify-between py-6 border-y border-gray-200">
          <div class="flex items-center gap-4">
            <div class="w-12 h-12 bg-gradient-to-br from-blue-500 to-purple-600 rounded-full flex items-center justify-center text-white font-bold text-sm font-sans">
              {post.data.author.split(' ').map(n => n[0]).join('').slice(0, 2)}
            </div>
            <div>
              <div class="font-medium text-gray-900 font-sans">{post.data.author}</div>
              <div class="text-sm text-gray-600 font-sans">
                <time datetime={post.data.pubDate.toISOString()}>
                  {post.data.pubDate.toLocaleDateString('en-US', {
                    year: 'numeric',
                    month: 'long',
                    day: 'numeric'
                  })}
                </time>
                <span class="mx-2">Â·</span>
                <span>5 min read</span>
              </div>
            </div>
          </div>
          
          <div class="flex flex-wrap gap-2">
            {post.data.tags.slice(0, 3).map((tag) => (
              <span class="px-3 py-1 bg-gray-100 text-gray-700 text-xs rounded-full font-sans font-medium">
                {tag}
              </span>
            ))}
          </div>
        </div>
      </header>
      
      <!-- Article Content -->
      <div class="blog-content">
        <Content />
      </div>
      
      <!-- Article Footer -->
      <footer class="mt-16 pt-8 border-t border-gray-200">
        <div class="flex items-center justify-between">
          <div class="flex items-center gap-6">
            <button class="flex items-center gap-2 px-4 py-2 rounded-lg border border-gray-300 hover:bg-gray-50 transition-colors font-sans">
              <svg class="w-5 h-5 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"></path>
              </svg>
              <span class="text-sm font-medium text-gray-700">12</span>
            </button>
            <button class="flex items-center gap-2 px-4 py-2 rounded-lg border border-gray-300 hover:bg-gray-50 transition-colors font-sans">
              <svg class="w-5 h-5 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"></path>
              </svg>
              <span class="text-sm font-medium text-gray-700">3</span>
            </button>
          </div>
          
          <div class="flex items-center gap-3">
            <a 
              href="/webtest/resources/technical-blog"
              class="px-6 py-2 text-sm font-medium text-gray-700 hover:text-gray-900 transition-colors font-sans"
            >
              More Articles
            </a>
            <a 
              href="/webtest/contact"
              class="px-6 py-2 bg-gray-900 text-white text-sm font-medium rounded-lg hover:bg-gray-800 transition-colors font-sans"
            >
              Get In Touch
            </a>
          </div>
        </div>
      </footer>
    </article>
  </main>
</ContentLayout>

<!-- Article Schema Markup -->
<script type="application/ld+json" is:inline>
{
  "@context": "https://schema.org",
  "@type": "Article",
  "headline": {JSON.stringify(post.data.title)},
  "description": {JSON.stringify(post.data.description)},
  "image": {
    "@type": "ImageObject",
    "url": `https://cloud-intelligence.github.io/webtest/logo.png`,
    "width": 1200,
    "height": 630
  },
  "author": {
    "@type": "Person",
    "name": {JSON.stringify(post.data.author)},
    "url": "https://cloud-intelligence.github.io/webtest/team"
  },
  "publisher": {
    "@type": "Organization",
    "@name": "Cloud Intelligence",
    "logo": {
      "@type": "ImageObject",
      "url": "https://cloud-intelligence.github.io/webtest/logo.png",
      "width": 200,
      "height": 200
    },
    "url": "https://cloud-intelligence.github.io/webtest/"
  },
  "datePublished": {JSON.stringify(post.data.pubDate.toISOString())},
  "dateModified": {JSON.stringify(post.data.pubDate.toISOString())},
  "mainEntityOfPage": {
    "@type": "WebPage",
    "@id": `https://cloud-intelligence.github.io/webtest/blog/${post.slug}`
  },
  "url": `https://cloud-intelligence.github.io/webtest/blog/${post.slug}`,
  "isPartOf": {
    "@type": "Blog",
    "name": "Cloud Intelligence Technical Blog",
    "url": "https://cloud-intelligence.github.io/webtest/resources/technical-blog"
  },
  "articleSection": "Technology",
  "keywords": {JSON.stringify(post.data.tags.join(', '))},
  "wordCount": 1500,
  "timeRequired": "PT5M",
  "about": [
    {
      "@type": "Thing",
      "name": "Cloud Computing"
    },
    {
      "@type": "Thing", 
      "name": "Software Development"
    },
    {
      "@type": "Thing",
      "name": "Technology Solutions"
    }
  ],
  "mentions": [
    {
      "@type": "Organization",
      "name": "Cloud Intelligence",
      "url": "https://cloud-intelligence.github.io/webtest/"
    }
  ],
  "inLanguage": "en-US",
  "copyrightHolder": {
    "@type": "Organization",
    "name": "Cloud Intelligence"
  },
  "copyrightYear": 2024,
  "license": "https://creativecommons.org/licenses/by-nc-sa/4.0/",
  "potentialAction": {
    "@type": "ReadAction",
    "target": `https://cloud-intelligence.github.io/webtest/blog/${post.slug}`
  }
}
</script>

<!-- TechArticle Schema for Technical Posts -->
{post.data.tags.some(tag => ['technical', 'development', 'programming', 'tutorial', 'guide'].some(keyword => tag.toLowerCase().includes(keyword))) && (
<script type="application/ld+json" is:inline>
{
  "@context": "https://schema.org",
  "@type": "TechArticle",
  "headline": {JSON.stringify(post.data.title)},
  "description": {JSON.stringify(post.data.description)},
  "author": {
    "@type": "Person",
    "name": {JSON.stringify(post.data.author)}
  },
  "publisher": {
    "@type": "Organization",
    "@name": "Cloud Intelligence"
  },
  "datePublished": {JSON.stringify(post.data.pubDate.toISOString())},
  "proficiencyLevel": "Intermediate",
  "dependencies": {JSON.stringify(post.data.tags.filter(tag => 
    ['javascript', 'python', 'react', 'node', 'aws', 'azure', 'docker', 'kubernetes'].includes(tag.toLowerCase())
  ))},
  "applicationCategory": "DeveloperApplication"
}
</script>
)}

<!-- HowTo Schema for Tutorial Posts -->
{post.data.tags.some(tag => ['tutorial', 'guide', 'how-to', 'step-by-step'].some(keyword => tag.toLowerCase().includes(keyword))) && (
<script type="application/ld+json" is:inline>
{
  "@context": "https://schema.org",
  "@type": "HowTo",
  "name": {JSON.stringify(post.data.title)},
  "description": {JSON.stringify(post.data.description)},
  "image": "https://cloud-intelligence.github.io/webtest/logo.png",
  "author": {
    "@type": "Person",
    "name": {JSON.stringify(post.data.author)}
  },
  "datePublished": {JSON.stringify(post.data.pubDate.toISOString())},
  "totalTime": "PT30M",
  "estimatedCost": {
    "@type": "MonetaryAmount",
    "currency": "USD",
    "value": "0"
  },
  "supply": [
    {
      "@type": "HowToSupply",
      "name": "Computer with internet access"
    },
    {
      "@type": "HowToSupply", 
      "name": "Basic programming knowledge"
    }
  ],
  "tool": [
    {
      "@type": "HowToTool",
      "name": "Code Editor"
    },
    {
      "@type": "HowToTool",
      "name": "Terminal/Command Line"
    }
  ],
  "step": [
    {
      "@type": "HowToStep",
      "name": "Setup",
      "text": "Follow the setup instructions in the article",
      "url": `https://cloud-intelligence.github.io/webtest/blog/${post.slug}#setup`
    },
    {
      "@type": "HowToStep",
      "name": "Implementation", 
      "text": "Implement the solution as described",
      "url": `https://cloud-intelligence.github.io/webtest/blog/${post.slug}#implementation`
    },
    {
      "@type": "HowToStep",
      "name": "Testing",
      "text": "Test and validate your implementation",
      "url": `https://cloud-intelligence.github.io/webtest/blog/${post.slug}#testing`
    }
  ]
}
</script>
)}

<style>
  @import '@/styles/shared/content-pages.scss';
</style>