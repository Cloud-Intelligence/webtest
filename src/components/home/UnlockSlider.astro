---
// UnlockSlider component - A draggable slider with GSAP
import arrowIcon from 'src/assets/arrow-icon.png';
---

<div class="slider-container" role="slider" aria-label="Swipe to unlock" aria-valuemin="0" aria-valuemax="100" aria-valuenow="0" aria-valuetext="Locked, swipe to unlock" tabindex="0" style={`--arrow-icon: url(${arrowIcon.src});`}>
  <div class="slider-track" aria-hidden="true"></div>
  <div class="slider-handle" data-slider-handle role="button" aria-label="Drag to unlock" tabindex="-1"></div>
  <div class="slider-text" aria-live="polite" id="slider-text">Swipe to Unlock your Data</div>
</div>

<script>
  import { gsap } from 'gsap';
  import { Draggable } from 'gsap/Draggable';

  // Register GSAP plugin
  gsap.registerPlugin(Draggable);

  // Wait for DOM to be ready
  document.addEventListener('DOMContentLoaded', () => {
    // Get elements
    const sliderHandle = document.querySelector('[data-slider-handle]') as HTMLElement;
    const sliderText = document.querySelector('.slider-text') as HTMLElement;
    const sliderContainer = document.querySelector('.slider-container') as HTMLElement;

    if (!sliderHandle || !sliderText || !sliderContainer) return;

    // Calculate boundaries
    const updateBounds = () => {
      const containerWidth = sliderContainer.offsetWidth;
      const handleWidth = sliderHandle.offsetWidth;
      const padding = 8; // Account for container padding
      return containerWidth - handleWidth - padding;
    };

    let maxX = updateBounds();
    let unlocked = false;

    // Create draggable instance
    const draggable = Draggable.create(sliderHandle, {
      type: "x",
      bounds: { minX: 0, maxX: maxX },
      onDrag: function() {
        const progress = this.x / maxX;
        const progressPercent = Math.round(progress * 100);
        
        sliderText.style.opacity = (1 - progress).toString();
        
        // Update ARIA attributes
        sliderContainer.setAttribute('aria-valuenow', progressPercent.toString());
        sliderContainer.setAttribute('aria-valuetext', `${progressPercent}% unlocked`);
        
        // Check if reached the end
        if (progress > 0.95 && !unlocked) {
          unlocked = true;
          this.disable();
          performUnlock();
        }
      },
      onRelease: function() {
        if (!unlocked && this.x < maxX * 0.95) {
          // Snap back if not far enough
          gsap.to(sliderHandle, {
            x: 0,
            duration: 0.3,
            ease: "power2.out",
            onUpdate: function() {
              // Update arrow rotation during snap back
              const xValue = gsap.getProperty(sliderHandle, "x") as number;
              const progress = xValue / maxX;
            },
            onComplete: function() {
              // Reset text opacity to full when snap back completes
              sliderText.style.opacity = '1';
            }
          });
          
          // Also animate text opacity back to 1
          gsap.to(sliderText, {
            opacity: 1,
            duration: 0.3,
            ease: "power2.out"
          });
        }
      }
    })[0];

    // Update bounds on window resize
    window.addEventListener('resize', () => {
      maxX = updateBounds();
      draggable.applyBounds({ minX: 0, maxX: maxX });
    });

    // Unlock function
    function performUnlock() {
      // Complete slider movement
      gsap.to(sliderHandle, {
        x: maxX,
        duration: 0.2,
        ease: "power2.out",
        onComplete: () => {
          setTimeout(() => {
            sliderContainer.classList.add('success');
            sliderText.textContent = 'Success!';
            sliderText.style.opacity = '1';
            
            // After 800ms more, dispatch unlock event
            setTimeout(() => {
              const unlockEvent = new CustomEvent('slider-unlock', {
                bubbles: true,
                detail: { timestamp: Date.now() }
              });
              sliderContainer.dispatchEvent(unlockEvent);
            }, 800);
          }, 200);
        }
      });
    }
  });
</script>

<style lang="scss">
  @use 'src/styles/components/liquid-glass' as glass;
  
  .slider-container {
    position: relative;
    width: 376px;
    max-width: 90vw;
    height: 86px;
    border-radius: 20px;
    overflow: hidden;
    padding: 6px;
    display: flex;
    align-items: center;
    transition: all 0.6s ease;
    
    // Apply liquid glass effect with subtle opacity
    @include glass.liquid-glass-base(0.1, 8px, 150%);
    @include glass.liquid-shine(30%, 0.4, 0.1);
    
    
    // Success state (gradient) - blend with liquid glass
    &.success {
      .slider-text {
        color: #FFFFFF;
        background: none;
        -webkit-text-fill-color: #FFFFFF;
        left: 0;
      }
    }
  }

  .slider-track {
    position: absolute;
    inset: 0;
    background: transparent;
  }

  .slider-handle {
    position: relative;
    width: 74px;
    height: 74px;
    background: linear-gradient(
      180deg,
      #8BCBEF 0%,
      #27AAE1 50.002%,
      #3366FF 100%
    );
    border-radius: 18px;
    cursor: grab;
    display: flex;
    align-items: center;
    justify-content: center;
    flex-shrink: 0;
    transition: all 0.4s ease;
    
    // Add subtle liquid glass overlay for premium feel
    &::before {
      content: '';
      position: absolute;
      inset: 0;
      border-radius: inherit;
      @include glass.liquid-glass-base(0.15, 6px, 120%);
      pointer-events: none;
      z-index: 1;
    }

    &:active {
      cursor: grabbing;
      transform: scale(0.95);
    }

    &::after {
      content: '';
      position: absolute;
      width: 46px;
      height: 40px;
      background-image: var(--arrow-icon);
      background-repeat: no-repeat;
      background-position: center;
      background-size: contain;
      z-index: 2; // Ensure arrow appears above glass overlay
    }
  }

  .slider-text {
    position: absolute;
    width: 100%;
    text-align: center;
    top: 50%;
    left: 1.5rem;
    right: 0;
    transform: translateY(-50%);
    background: linear-gradient(
      90deg,
      #ffffff 20.002%,
      #3366FF 100%
    );
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    font-family: 'Inter', sans-serif;
    font-size: 19px;
    font-weight: 400;
    line-height: 1.21;
    pointer-events: none;
    transition: opacity 0.3s;
    z-index: 1;
  }

  @keyframes shimmer {
    0% {
      background-position: -200% 0;
    }
    100% {
      background-position: 200% 0;
    }
  }

  @media (max-width: 768px) {
    .slider-container {
      width: 90vw;
      height: 74px;
    }
    
    .slider-handle {
      width: 62px;
      height: 62px;
      border-radius: 15px;
      
      &::after {
        width: 38px;
        height: 33px;
      }
    }
    
    .slider-text {
      font-size: 16px;
    }
  }
</style>
