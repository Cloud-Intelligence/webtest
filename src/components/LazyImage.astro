---
// Lazy loading image component
import { Image } from 'astro:assets';

export interface Props {
  src: ImageMetadata;
  alt: string;
  width?: number;
  height?: number;
  format?: 'webp' | 'avif' | 'png' | 'jpg';
  quality?: number;
  loading?: 'lazy' | 'eager';
  fetchpriority?: 'high' | 'low' | 'auto';
  class?: string;
  sizes?: string;
  widths?: number[];
}

const {
  src,
  alt,
  width,
  height,
  format = 'webp',
  quality = 85,
  loading = 'lazy',
  fetchpriority = 'auto',
  class: className,
  sizes,
  widths,
  ...props
} = Astro.props;
---

<Image
  src={src}
  alt={alt}
  width={width}
  height={height}
  format={format}
  quality={quality}
  loading={loading}
  fetchpriority={fetchpriority}
  class={`lazy-image ${className || ''}`}
  sizes={sizes}
  widths={widths}
  {...props}
/>

<style>
  .lazy-image {
    transition: opacity 0.3s ease;
  }
  
  .lazy-image[loading="lazy"] {
    opacity: 0;
  }
  
  .lazy-image.loaded {
    opacity: 1;
  }
  
  /* Placeholder while loading */
  .lazy-image:not(.loaded) {
    background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
    background-size: 200% 100%;
    animation: loading 1.5s infinite;
  }
  
  @keyframes loading {
    0% { background-position: 200% 0; }
    100% { background-position: -200% 0; }
  }
</style>

<script>
  // Intersection Observer for lazy loading
  if ('IntersectionObserver' in window) {
    const imageObserver = new IntersectionObserver((entries, observer) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const img = entry.target as HTMLImageElement;
          
          // Add loaded class when image loads
          img.addEventListener('load', () => {
            img.classList.add('loaded');
          });
          
          // Stop observing this image
          observer.unobserve(img);
        }
      });
    }, {
      // Start loading when image is 100px from viewport
      rootMargin: '100px'
    });

    // Observe all lazy images
    document.querySelectorAll('.lazy-image[loading="lazy"]').forEach(img => {
      imageObserver.observe(img);
    });
  } else {
    // Fallback: mark all images as loaded
    document.querySelectorAll('.lazy-image').forEach(img => {
      img.classList.add('loaded');
    });
  }
</script>